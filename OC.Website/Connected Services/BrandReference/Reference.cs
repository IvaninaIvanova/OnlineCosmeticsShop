//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BrandReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BrandDto", Namespace="http://schemas.datacontract.org/2004/07/OC.Business.DTOs")]
    public partial class BrandDto : BrandReference.BaseDto
    {
        
        private string BrandNameField;
        
        private string ManufacturerCountryField;
        
        private int ProductClassField;
        
        private double RatingField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BrandName
        {
            get
            {
                return this.BrandNameField;
            }
            set
            {
                this.BrandNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ManufacturerCountry
        {
            get
            {
                return this.ManufacturerCountryField;
            }
            set
            {
                this.ManufacturerCountryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductClass
        {
            get
            {
                return this.ProductClassField;
            }
            set
            {
                this.ProductClassField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Rating
        {
            get
            {
                return this.RatingField;
            }
            set
            {
                this.RatingField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseDto", Namespace="http://schemas.datacontract.org/2004/07/OC.Business.DTOs")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BrandReference.BrandDto))]
    public partial class BaseDto : object
    {
        
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BrandReference.IBrands")]
    public interface IBrands
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrands/GetAllByBrandName", ReplyAction="http://tempuri.org/IBrands/GetAllByBrandNameResponse")]
        BrandReference.BrandDto[] GetAllByBrandName(string brandName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrands/GetAllByBrandName", ReplyAction="http://tempuri.org/IBrands/GetAllByBrandNameResponse")]
        System.Threading.Tasks.Task<BrandReference.BrandDto[]> GetAllByBrandNameAsync(string brandName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrands/GetAll", ReplyAction="http://tempuri.org/IBrands/GetAllResponse")]
        BrandReference.BrandDto[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrands/GetAll", ReplyAction="http://tempuri.org/IBrands/GetAllResponse")]
        System.Threading.Tasks.Task<BrandReference.BrandDto[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrands/GetById", ReplyAction="http://tempuri.org/IBrands/GetByIdResponse")]
        BrandReference.BrandDto GetById(int directorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrands/GetById", ReplyAction="http://tempuri.org/IBrands/GetByIdResponse")]
        System.Threading.Tasks.Task<BrandReference.BrandDto> GetByIdAsync(int directorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrands/Create", ReplyAction="http://tempuri.org/IBrands/CreateResponse")]
        string Create(BrandReference.BrandDto director);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrands/Create", ReplyAction="http://tempuri.org/IBrands/CreateResponse")]
        System.Threading.Tasks.Task<string> CreateAsync(BrandReference.BrandDto director);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrands/Update", ReplyAction="http://tempuri.org/IBrands/UpdateResponse")]
        string Update(BrandReference.BrandDto director);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrands/Update", ReplyAction="http://tempuri.org/IBrands/UpdateResponse")]
        System.Threading.Tasks.Task<string> UpdateAsync(BrandReference.BrandDto director);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrands/Delete", ReplyAction="http://tempuri.org/IBrands/DeleteResponse")]
        string Delete(int directorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrands/Delete", ReplyAction="http://tempuri.org/IBrands/DeleteResponse")]
        System.Threading.Tasks.Task<string> DeleteAsync(int directorId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IBrandsChannel : BrandReference.IBrands, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class BrandsClient : System.ServiceModel.ClientBase<BrandReference.IBrands>, BrandReference.IBrands
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public BrandsClient() : 
                base(BrandsClient.GetDefaultBinding(), BrandsClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BrandService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BrandsClient(EndpointConfiguration endpointConfiguration) : 
                base(BrandsClient.GetBindingForEndpoint(endpointConfiguration), BrandsClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BrandsClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(BrandsClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BrandsClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(BrandsClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BrandsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public BrandReference.BrandDto[] GetAllByBrandName(string brandName)
        {
            return base.Channel.GetAllByBrandName(brandName);
        }
        
        public System.Threading.Tasks.Task<BrandReference.BrandDto[]> GetAllByBrandNameAsync(string brandName)
        {
            return base.Channel.GetAllByBrandNameAsync(brandName);
        }
        
        public BrandReference.BrandDto[] GetAll()
        {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<BrandReference.BrandDto[]> GetAllAsync()
        {
            return base.Channel.GetAllAsync();
        }
        
        public BrandReference.BrandDto GetById(int directorId)
        {
            return base.Channel.GetById(directorId);
        }
        
        public System.Threading.Tasks.Task<BrandReference.BrandDto> GetByIdAsync(int directorId)
        {
            return base.Channel.GetByIdAsync(directorId);
        }
        
        public string Create(BrandReference.BrandDto director)
        {
            return base.Channel.Create(director);
        }
        
        public System.Threading.Tasks.Task<string> CreateAsync(BrandReference.BrandDto director)
        {
            return base.Channel.CreateAsync(director);
        }
        
        public string Update(BrandReference.BrandDto director)
        {
            return base.Channel.Update(director);
        }
        
        public System.Threading.Tasks.Task<string> UpdateAsync(BrandReference.BrandDto director)
        {
            return base.Channel.UpdateAsync(director);
        }
        
        public string Delete(int directorId)
        {
            return base.Channel.Delete(directorId);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAsync(int directorId)
        {
            return base.Channel.DeleteAsync(directorId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BrandService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.TransportCredentialOnly;
                result.Security.Transport.ClientCredentialType = System.ServiceModel.HttpClientCredentialType.Windows;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BrandService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:53048/Brands.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return BrandsClient.GetBindingForEndpoint(EndpointConfiguration.BrandService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return BrandsClient.GetEndpointAddress(EndpointConfiguration.BrandService);
        }
        
        public enum EndpointConfiguration
        {
            
            BrandService,
        }
    }
}
