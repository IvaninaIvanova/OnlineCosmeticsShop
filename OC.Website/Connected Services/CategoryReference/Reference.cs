//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CategoryReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CategoryDto", Namespace="http://schemas.datacontract.org/2004/07/OC.Business.DTOs")]
    public partial class CategoryDto : CategoryReference.BaseDto
    {
        
        private bool DeliveryField;
        
        private string NameCategoryField;
        
        private double StarsField;
        
        private string SubcategoryField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Delivery
        {
            get
            {
                return this.DeliveryField;
            }
            set
            {
                this.DeliveryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameCategory
        {
            get
            {
                return this.NameCategoryField;
            }
            set
            {
                this.NameCategoryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Stars
        {
            get
            {
                return this.StarsField;
            }
            set
            {
                this.StarsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subcategory
        {
            get
            {
                return this.SubcategoryField;
            }
            set
            {
                this.SubcategoryField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseDto", Namespace="http://schemas.datacontract.org/2004/07/OC.Business.DTOs")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(CategoryReference.CategoryDto))]
    public partial class BaseDto : object
    {
        
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CategoryReference.ICategories")]
    public interface ICategories
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategories/GetAllByCategoryName", ReplyAction="http://tempuri.org/ICategories/GetAllByCategoryNameResponse")]
        CategoryReference.CategoryDto[] GetAllByCategoryName(string nameCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategories/GetAllByCategoryName", ReplyAction="http://tempuri.org/ICategories/GetAllByCategoryNameResponse")]
        System.Threading.Tasks.Task<CategoryReference.CategoryDto[]> GetAllByCategoryNameAsync(string nameCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategories/GetAll", ReplyAction="http://tempuri.org/ICategories/GetAllResponse")]
        CategoryReference.CategoryDto[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategories/GetAll", ReplyAction="http://tempuri.org/ICategories/GetAllResponse")]
        System.Threading.Tasks.Task<CategoryReference.CategoryDto[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategories/GetById", ReplyAction="http://tempuri.org/ICategories/GetByIdResponse")]
        CategoryReference.CategoryDto GetById(int genreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategories/GetById", ReplyAction="http://tempuri.org/ICategories/GetByIdResponse")]
        System.Threading.Tasks.Task<CategoryReference.CategoryDto> GetByIdAsync(int genreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategories/Create", ReplyAction="http://tempuri.org/ICategories/CreateResponse")]
        string Create(CategoryReference.CategoryDto genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategories/Create", ReplyAction="http://tempuri.org/ICategories/CreateResponse")]
        System.Threading.Tasks.Task<string> CreateAsync(CategoryReference.CategoryDto genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategories/Update", ReplyAction="http://tempuri.org/ICategories/UpdateResponse")]
        string Update(CategoryReference.CategoryDto genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategories/Update", ReplyAction="http://tempuri.org/ICategories/UpdateResponse")]
        System.Threading.Tasks.Task<string> UpdateAsync(CategoryReference.CategoryDto genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategories/Delete", ReplyAction="http://tempuri.org/ICategories/DeleteResponse")]
        string Delete(int genreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategories/Delete", ReplyAction="http://tempuri.org/ICategories/DeleteResponse")]
        System.Threading.Tasks.Task<string> DeleteAsync(int genreId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface ICategoriesChannel : CategoryReference.ICategories, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class CategoriesClient : System.ServiceModel.ClientBase<CategoryReference.ICategories>, CategoryReference.ICategories
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CategoriesClient() : 
                base(CategoriesClient.GetDefaultBinding(), CategoriesClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.CategoryService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CategoriesClient(EndpointConfiguration endpointConfiguration) : 
                base(CategoriesClient.GetBindingForEndpoint(endpointConfiguration), CategoriesClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CategoriesClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CategoriesClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CategoriesClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CategoriesClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CategoriesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public CategoryReference.CategoryDto[] GetAllByCategoryName(string nameCategory)
        {
            return base.Channel.GetAllByCategoryName(nameCategory);
        }
        
        public System.Threading.Tasks.Task<CategoryReference.CategoryDto[]> GetAllByCategoryNameAsync(string nameCategory)
        {
            return base.Channel.GetAllByCategoryNameAsync(nameCategory);
        }
        
        public CategoryReference.CategoryDto[] GetAll()
        {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<CategoryReference.CategoryDto[]> GetAllAsync()
        {
            return base.Channel.GetAllAsync();
        }
        
        public CategoryReference.CategoryDto GetById(int genreId)
        {
            return base.Channel.GetById(genreId);
        }
        
        public System.Threading.Tasks.Task<CategoryReference.CategoryDto> GetByIdAsync(int genreId)
        {
            return base.Channel.GetByIdAsync(genreId);
        }
        
        public string Create(CategoryReference.CategoryDto genre)
        {
            return base.Channel.Create(genre);
        }
        
        public System.Threading.Tasks.Task<string> CreateAsync(CategoryReference.CategoryDto genre)
        {
            return base.Channel.CreateAsync(genre);
        }
        
        public string Update(CategoryReference.CategoryDto genre)
        {
            return base.Channel.Update(genre);
        }
        
        public System.Threading.Tasks.Task<string> UpdateAsync(CategoryReference.CategoryDto genre)
        {
            return base.Channel.UpdateAsync(genre);
        }
        
        public string Delete(int genreId)
        {
            return base.Channel.Delete(genreId);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAsync(int genreId)
        {
            return base.Channel.DeleteAsync(genreId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CategoryService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.TransportCredentialOnly;
                result.Security.Transport.ClientCredentialType = System.ServiceModel.HttpClientCredentialType.Windows;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CategoryService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:53048/Categories.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CategoriesClient.GetBindingForEndpoint(EndpointConfiguration.CategoryService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CategoriesClient.GetEndpointAddress(EndpointConfiguration.CategoryService);
        }
        
        public enum EndpointConfiguration
        {
            
            CategoryService,
        }
    }
}
